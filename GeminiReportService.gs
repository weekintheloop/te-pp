/**
 * @fileoverview GeminiReportService.gs
 * @description Implements report-generation functions by building prompts and calling the GeminiService.
 */

/**
 * Generates a comprehensive diagnostic report based on various system data.
 * This function gathers data from other services and uses Gemini to synthesize a report.
 * @returns {string} A diagnostic report generated by Gemini.
 */
function generateDiagnosticReport() {
    const criticalRoutes = analyzeCriticalRoutes(); // From CriticalRoutesService
    const absencePatterns = analyzeAbsencePatterns(); // From AbsenceAnalysisService

    let prompt = "Generate a diagnostic report for the Integrated School Transportation Management System (SIG-TE) based on the following data:\n\n";

    prompt += "### Rotas Críticas (Alta Ocupação):\n";
    if (criticalRoutes.length > 0) {
        criticalRoutes.forEach(route => {
            prompt += `- Rota: ${route.Nome}, Ônibus: ${route.Onibus}, Ocupação Atual: ${route.OcupacaoAtual}, Capacidade: ${route.CapacidadeOnibus}, Percentual: ${route.PercentualOcupacao}\n`;
        });
    } else {
        prompt += "Nenhuma rota crítica identificada com alta ocupação.\n";
    }

    prompt += "\n### Padrões de Ausência de Alunos (Alunos em Risco):\n";
    if (absencePatterns.length > 0) {
        absencePatterns.forEach(student => {
            prompt += `- Aluno: ${student.Aluno}, Escola: ${student.Escola}, Total de Faltas: ${student.TotalFaltas}, Última Falta: ${student.UltimaFalta}, Status: ${student.Status}\n`;
        });
    } else {
        prompt += "Nenhum padrão de ausência de alunos em risco identificado.\n";
    }

    prompt += "\nCom base nesses dados, forneça uma análise concisa e sugestões de ações para melhorar a eficiência e a segurança do sistema. O relatório deve ser objetivo e focado em soluções.\n";

    try {
        const report = callGeminiApi(prompt, { maxOutputTokens: 1024 });
        return report;
    } catch (e) {
        console.error("Error generating diagnostic report with Gemini: " + e.message);
        return "Erro ao gerar o relatório diagnóstico. Por favor, verifique a configuração do Gemini Service e os dados de entrada.";
    }
}

/**
 * Generates a summary of a specific entity (e.g., a student, a route).
 * @param {string} entityName - The name of the entity (e.g., "Aluno", "Rota").
 * @param {number} id - The ID of the entity record.
 * @returns {string} A summary generated by Gemini.
 */
function generateEntitySummary(entityName, id) {
    const record = getById(entityName, id); // From DataManager

    if (!record) {
        return `Registro com ID ${id} não encontrado na entidade ${entityName}.`;
    }

    let prompt = `Gere um resumo conciso para o seguinte registro da entidade ${entityName}:\n\n`;
    for (const key in record) {
        prompt += `- ${key}: ${record[key]}\n`;
    }
    prompt += `\nO resumo deve destacar as informações mais relevantes de forma clara e objetiva.\n`;

    try {
        const summary = callGeminiApi(prompt, { maxOutputTokens: 512 });
        return summary;
    } catch (e) {
        console.error(`Error generating summary for ${entityName} ID ${id} with Gemini: ` + e.message);
        return `Erro ao gerar o resumo para ${entityName} ID ${id}. Por favor, verifique a configuração do Gemini Service e os dados de entrada.`;
    }
}


